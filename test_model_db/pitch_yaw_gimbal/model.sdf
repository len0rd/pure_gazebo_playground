<?xml version='1.0'?>
<sdf version="1.6">
    <model name="pitch_yaw_gimbal">
        <!--Set to true to have mode not affected by physics. Useful when building the model-->
        <static>false</static>
        <link name="pitch_arm">
            <!--Position (x,y,z) in meters then orientation (r,p,y) in rad(?) of the link-->
            <pose>0 0 0.1 0 0 0</pose>
            <inertial>
                <mass>0.02</mass> <!--Mass in kg-->
                <inertia>
                    <!--
                        For simplicity, treat as a solid rectangle
                        http://gazebosim.org/tutorials?tut=inertia&cat=build_robot
                        Use https://en.wikipedia.org/wiki/List_of_moments_of_inertia
                        For now treat like a box? 15x9x4cm box
                    -->
                    <ixx>0.0000161</ixx>   <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) -->
                    <ixy>0.0</ixy>         <!-- for a box: ixy = 0 -->
                    <ixz>0.0</ixz>         <!-- for a box: ixz = 0 -->
                    <iyy>0.00004001</iyy>  <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) -->
                    <iyz>0.0</iyz>         <!-- for a box: iyz = 0 -->
                    <izz>0.0000508</izz>   <!-- for a box: izz = 0.083 * mass * (x*x + y*y) -->

                </inertia>
                <pose>0 0.05 0 0 0 0</pose>
            </inertial>
            <collision name="aircraft_to_pitch_arms">
                <!--Use a box to represent the part of the gimbal that attaches to the aircraft. From this
                    piece, the two pitch arms come out-->
                <geometry>
                    <box>
                        <size>.15 .01 .05</size>
                    </box>
                </geometry>
            </collision>
            <collision name="pitch_arm_right">
                <!--Pitch arm on the left on the gimbal when looking down from above-->
                <pose>.07 .05 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .1 .025</size>
                    </box>
                </geometry>
            </collision>
            <collision name="pitch_arm_left">
                <!--Pitch arm on the right on the gimbal when looking down from above-->
                <pose>-.07 .05 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .1 .025</size>
                    </box>
                </geometry>
            </collision>

            <!--For now the visuals will be exactly the same-->
            <visual name="aircraft_to_pitch_arms_vis">
                <geometry>
                    <box>
                        <size>.15 .01 .05</size>
                    </box>
                </geometry>
            </visual>
            <visual name="pitch_arm_right_vis">
                <pose>.07 .05 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .1 .025</size>
                    </box>
                </geometry>
            </visual>
            <visual name="pitch_arm_left_vis">
                <pose>-.07 .05 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .1 .025</size>
                    </box>
                </geometry>
            </visual>
        </link>

        <link name="yaw_arm">
            <!--The box arm that holds the yaw motor. this is a child of the pitch arm
                Y origin should be just about at the end of the pitch arms length-->
            <pose>0 .09 0.1 0 0 0</pose>
            <inertial>
                <mass>.015</mass> <!--Mass is in kg-->
                <!--
                    For simplicity, treat as a solid rectangle
                    Use https://en.wikipedia.org/wiki/List_of_moments_of_inertia
                    to calculate inertia "tensor"/matrix. Note that side definitions
                    (height, width, depth) are dependent on the axis of rotation
                    for the yaw arm:
                    depth/z  = .15
                    width/x  = .128
                    height/y = .025 -->
                <inertia>
                    <ixx>0.00002890625</ixx> <!--1/12 * m * (h^2 + d^2)-->
                    <ixy>0</ixy>
                    <ixz>0</ixz>
                    <iyy>0.000048605</iyy> <!--1/12 * m * (w^2 + d^2)-->
                    <iyz>0</iyz>
                    <izz>0.00002126125</izz> <!--1/12 * m * (w^2 + h^2) -->
                </inertia>
            </inertial>
            <collision name="yaw_arm_left">
                <pose>-.059 0 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .025 .15</size>
                    </box>
                </geometry>
            </collision>
            <collision name="yaw_arm_right">
                <pose>.059 0 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .025 .15</size>
                    </box>
                </geometry>
            </collision>
            <collision name="yaw_arm_top">
                <pose>0 0 .075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.128 .025 .01</size>
                    </box>
                </geometry>
            </collision>
            <collision name="yaw_arm_bottom">
                <pose>0 0 -.075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.128 .025 .01</size>
                    </box>
                </geometry>
            </collision>
            <collision name="pitch_stop_top">
                <pose>-.068 0 .075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .01 .01</size>
                    </box>
                </geometry>
            </collision>

            <!--For now the visuals will be exactly the same-->
            <visual name="yaw_arm_left_vis">
                <pose>-.059 0 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .025 .15</size>
                    </box>
                </geometry>
            </visual>
            <visual name="yaw_arm_right_vis">
                <pose>.059 0 0 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .025 .15</size>
                    </box>
                </geometry>
            </visual>
            <visual name="yaw_arm_top_vis">
                <pose>0 0 .075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.128 .025 .01</size>
                    </box>
                </geometry>
            </visual>
            <visual name="yaw_arm_bottom_vis">
                <pose>0 0 -.075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.128 .025 .01</size>
                    </box>
                </geometry>
            </visual>
            <visual name="pitch_stop_top_vis">
                <pose>-.068 0 .075 0 0 0</pose>
                <geometry>
                    <box>
                        <size>.01 .01 .01</size>
                    </box>
                </geometry>
            </visual>

        </link>

        <link name="payload">
            <!--Same pose as the yaw arm so its centered-->
            <pose>0 .09 0.1 0 0 0</pose>
            <inertial>
                <!--Mass is in kg-->
                <mass>.05</mass>
                <!--
                    For simplicity, treat gimbal payload as a solid cylinder
                    Use https://en.wikipedia.org/wiki/List_of_moments_of_inertia
                    to calculate inertia "tensor"/matrix-->
                <inertia>
                    <ixx>0.00010166667</ixx> <!--1/12 * m * (3r^2 + h^2) = .00010166667-->
                    <ixy>0</ixy>
                    <ixz>0</ixz>
                    <iyy>0.00010166667</iyy> <!--1/12 * m * (3r^2 + h^2) = .00010166667-->
                    <iyz>0</iyz>
                    <izz>0.0000625</izz> <!--1/2 * m * r^2-->
                </inertia>
            </inertial>
            <!--Collision is simple cylinder while visual is more complex-->
            <collision name="payload">
                <geometry>
                    <cylinder>
                        <radius>.05</radius>
                        <length>.13</length>
                    </cylinder>
                </geometry>
            </collision>
            <!-- <visual name="payload_vis">
                <geometry>
                    <cylinder>
                        <radius>.05</radius>
                        <length>.135</length>
                    </cylinder>
                </geometry>
            </visual> -->
            <visual name='payload_vis'>
                <pose>0 0 -0.065 0 0 1.570795</pose>
                <geometry>
                <polyline>
                    <height>0.125</height>
                    <point>0.00760627 0.0492587</point>
                    <point>0.0144458 0.0488088</point>
                    <point>0.0212937 0.0475121</point>
                    <point>0.0276877 0.0454477</point>
                    <point>0.0331653 0.042695</point>
                    <point>0.0372643 0.0393331</point>
                    <point>0.0379975 0.038523</point>
                    <point>0.0391229 0.0371049</point>
                    <point>0.0403205 0.0351534</point>
                    <point>0.0412703 0.0327429</point>
                    <point>0.0416524 0.0299478</point>
                    <point>0.0415674 0.000106743</point>
                    <point>0.0415976 -0.0294405</point>
                    <point>0.0413186 -0.0320958</point>
                    <point>0.0405848 -0.0344677</point>
                    <point>0.0395601 -0.0365048</point>
                    <point>0.038408 -0.0381556</point>
                    <point>0.0372925 -0.0393688</point>
                    <point>0.0323942 -0.0430866</point>
                    <point>0.0267909 -0.0458754</point>
                    <point>0.0206682 -0.0477944</point>
                    <point>0.0142115 -0.0489024</point>
                    <point>0.00760627 -0.0492587</point>
                    <point>-0.00796328 -0.0467474</point>
                    <point>-0.0214853 -0.0397546</point>
                    <point>-0.0321483 -0.0290915</point>
                    <point>-0.0391412 -0.0155695</point>
                    <point>-0.0416524 4.5579e-10</point>
                    <point>-0.0391412 0.0155695</point>
                    <point>-0.0321483 0.0290915</point>
                    <point>-0.0214853 0.0397546</point>
                    <point>-0.00796328 0.0467474</point>
                    <point>0.00760627 0.0492587</point>
                </polyline>
                </geometry>
                <material>
                    <lighting>1</lighting>
                    <script>
                        <uri>file://media/materials/scripts/gazebo.material</uri>
                        <name>Gazebo/Grey</name>
                    </script>
                    <shader type='pixel'/>
                </material>
                <transparency>0</transparency>
                <cast_shadows>1</cast_shadows>
            </visual>
            <sensor name='imu_sensor' type='imu'>
                <pose frame=''>0 0 0 0 -0 0</pose>
                <always_on>1</always_on>
                <update_rate>100</update_rate>
            </sensor>
        </link>

        <!--Pitch to yaw arm joint-->
        <joint type="revolute" name="pitch_yaw_joint">
            <!--
                initial pose of the joint is based on the main pose of the child link
                (in this case the center of the yaw arm)
                x pose is equal to yaw_arm_left or yaw_arm_right x pose-->
            <pose>-.06 0 0 0 0 0</pose>
            <parent>pitch_arm</parent>
            <child>yaw_arm</child>
            <!--define axis of revolution-->
            <axis>
                <xyz>1 0 0</xyz>
                <!--Define joint limits in radians (the visual mechanical stop doesnt do anything)-->
                <limit>
                    <lower>-1.420796</lower> <!--~90% pi/2-->
                    <upper>1.420796</upper>
                    <effort>10</effort> <!--max effort you can apply to joint in Nm?-->
                </limit>
                <!--Dynamics makes the joint more realistic in sim-->
                <dynamics>
                    <damping>0.5</damping>
                    <spring_reference>0</spring_reference>
                    <spring_stiffness>0</spring_stiffness>
                </dynamics>
            </axis>
            <physics>
                <!--ode is gazebos default physics engine. Properties here are specific to it-->
                <ode>
                    <implicit_spring_damper>1</implicit_spring_damper>
                </ode>
            </physics>
        </joint>

        <!--Yaw to payload joint-->
        <joint type="revolute" name="yaw_payload_joint">
            <pose>0 0 .065 0 0 0</pose>
            <parent>yaw_arm</parent>
            <child>payload</child>
            <!--define axis of revolution-->
            <axis>
                <xyz>0 0 1</xyz>
                <!--Define joint limits in radians-->
                <limit>
                    <lower>-0.9424778</lower> <!--~60% pi/2-->
                    <upper>0.9424778</upper>
                    <effort>10</effort> <!--max effort you can apply to joint in Nm?-->
                </limit>
                <!--Dynamics makes the joint more realistic in sim-->
                <dynamics>
                    <damping>0.5</damping>
                    <spring_reference>0</spring_reference>
                    <spring_stiffness>0</spring_stiffness>
                </dynamics>
            </axis>
            <physics>
                <!--ode is gazebos default physics engine. Properties here are specific to it-->
                <ode>
                    <implicit_spring_damper>1</implicit_spring_damper>
                </ode>
            </physics>
        </joint>

        <plugin name="gimbalJoints" filename="libgimbal_motor_plugin.so"/>

    </model>
</sdf>
